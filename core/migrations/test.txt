# views.py
from django.contrib.auth.views import PasswordResetView, PasswordResetDoneView, PasswordResetConfirmView
from django.shortcuts import redirect, render
from django.contrib.auth import get_user_model
from django.contrib.auth.tokens import default_token_generator
from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode
from django.utils.encoding import force_bytes
from django.core.mail import EmailMultiAlternatives
from django.template.loader import render_to_string
from django.contrib import messages
from django.conf import settings

User = get_user_model()

class CustomPasswordResetView(PasswordResetView):
    template_name = 'auth/password_reset.html'
    email_template_name = 'auth/password_reset_email.html'
    subject_template_name = 'auth/password_reset_subject.txt'
    success_url = '/password-reset/done/'

    def form_valid(self, form):
        email = form.cleaned_data["email"]
        user = User.objects.filter(email=email, is_active=True).first()

        if user:
            context = {
                'email': email,
                'domain': self.request.get_host(),
                'site_name': 'EdukAI',
                'uid': urlsafe_base64_encode(force_bytes(user.pk)),
                'user': user,
                'token': default_token_generator.make_token(user),
                'protocol': 'https' if self.request.is_secure() else 'http',
            }

            subject = render_to_string(self.subject_template_name, context).strip()
            html_email = render_to_string(self.email_template_name, context)

            email_message = EmailMultiAlternatives(subject, '', settings.DEFAULT_FROM_EMAIL, [email])
            email_message.attach_alternative(html_email, "text/html")
            email_message.send()

            return super().form_valid(form)
        else:
            messages.error(self.request, "No se encontr√≥ ninguna cuenta activa con ese correo.")
            return self.form_invalid(form)

class CustomPasswordResetConfirmView(PasswordResetConfirmView):
    template_name = 'auth/password_reset_confirm.html'
    success_url = '/reset/complete/'

    def dispatch(self, request, uidb64=None, token=None, *args, **kwargs):
        try:
            uid = urlsafe_base64_decode(uidb64).decode()
            user = User.objects.get(pk=uid)
        except (TypeError, ValueError, OverflowError, User.DoesNotExist):
            user = None

        if user is None or not default_token_generator.check_token(user, token):
            request.session['token_expired_email'] = user.email if user else ''
            return redirect('password_reset')

        return super().dispatch(request, uidb64, token, *args, **kwargs)


# urls.py
from django.urls import path
from .views import (
    CustomPasswordResetView,
    CustomPasswordResetConfirmView,
)
from django.contrib.auth import views as auth_views

urlpatterns = [
    path('password-reset/', CustomPasswordResetView.as_view(), name='password_reset'),
    path('password-reset/done/', auth_views.PasswordResetDoneView.as_view(
        template_name='auth/password_reset_done.html'
    ), name='password_reset_done'),
    path('reset/<uidb64>/<token>/', CustomPasswordResetConfirmView.as_view(), name='password_reset_confirm'),
    path('reset/complete/', auth_views.PasswordResetCompleteView.as_view(
        template_name='auth/password_reset_complete.html'
    ), name='password_reset_complete'),



    # üìä Flujo completo de Recuperaci√≥n y Activaci√≥n de Cuenta - EdukAI

## üîê 1. Registro de usuario
- Usuario se registra con `CustomUserCreationForm`
- Se crea el `User` con `is_active = False`
- Se crea su `PerfilUsuario`
- Se llama a `enviar_activacion(request, user)`
  - Se genera token de activaci√≥n y se env√≠a por email

---

## üì¨ 2. Activaci√≥n de cuenta
- El usuario hace clic en el enlace recibido
- Vista `activar_cuenta` verifica token:
  - ‚úÖ Si v√°lido ‚Üí `user.is_active = True` y muestra mensaje de √©xito
  - ‚ùå Si inv√°lido/expirado ‚Üí redirige a login con mensaje de error + bot√≥n para reenviar

---

## ‚ôªÔ∏è 3. Reenviar activaci√≥n
- Vista `reenviar_activacion_view`
  - Verifica si el email pertenece a un usuario inactivo
  - Si existe ‚Üí reenv√≠a token de activaci√≥n
  - Si no ‚Üí muestra error

---

## üîë 4. Recuperar contrase√±a
- Usuario accede a `/password-reset/`
- Vista `CustomPasswordResetView`:
  - ‚úÖ Si el email existe y est√° activo ‚Üí env√≠a correo con enlace de token (HTML)
  - ‚ùå Si no ‚Üí muestra error y mantiene el formulario

---

## üîÅ 5. Token expirado al intentar cambiar contrase√±a
- Vista `CustomPasswordResetConfirmView`:
  - Detecta si el token es inv√°lido
  - Guarda `token_expired_email` en sesi√≥n y redirige a `/password-reset/`
- En `password_reset.html`, el email se precarga autom√°ticamente en el formulario

---

## ‚úÖ 6. Cambio de contrase√±a v√°lido
- El usuario accede desde el email con token v√°lido
- `PasswordResetConfirmView` muestra formulario
- Al completar correctamente:
  - Se redirige a `reset/complete/`
  - Se muestra mensaje de √©xito

---

## üí° Extras √∫tiles
- `request.session.pop(...)` se usa para limpiar sesiones temporales
- Todos los correos usan `EmailMultiAlternatives` con HTML
- Se incluyen mensajes visuales de confirmaci√≥n en cada paso
- Se mantiene consistencia de estilo con EdukAI (`card-glass`, colores, botones)

---

¬øQuieres convertir esto en una secci√≥n del README o documentarlo dentro del admin de tu proyecto?



‚úÖ Paso 1: Modificar views.py para permitir filtrar por categor√≠a
python
Copiar
Editar
from .models import Apunte, Categoria

@login_required
def mis_apuntes_view(request):
    categoria_id = request.GET.get('categoria')
    categorias = Categoria.objects.all()

    if categoria_id:
        apuntes = Apunte.objects.filter(usuario=request.user, categoria_id=categoria_id).order_by('-creado')
    else:
        apuntes = Apunte.objects.filter(usuario=request.user).order_by('-creado')

    return render(request, 'secciones/mis_apuntes.html', {
        'apuntes': apuntes,
        'categorias': categorias,
        'categoria_seleccionada': int(categoria_id) if categoria_id else None,
        'active': 'mis_apuntes'
    })
‚úÖ Ahora mis_apuntes_view recibe un GET con el id de la categor√≠a y filtra apuntes.

‚úÖ Paso 2: Modificar mis_apuntes.html
Agrega arriba del listado de apuntes un peque√±o filtro select:

html
Copiar
Editar
<form method="get" class="mb-4 d-flex align-items-center gap-3">
    <select name="categoria" class="form-select" style="max-width: 300px;">
        <option value="">Todas las categor√≠as</option>
        {% for categoria in categorias %}
            <option value="{{ categoria.id }}" {% if categoria.id == categoria_seleccionada %}selected{% endif %}>
                {{ categoria.nombre }}
            </option>
        {% endfor %}
    </select>
    <button type="submit" class="btn btn-primary">Filtrar</button>
</form>
‚úÖ As√≠ el usuario puede filtrar r√°pidamente entre Matem√°ticas, Historia, Programaci√≥n, etc.

‚úÖ Paso 3: No olvides
Recargar la p√°gina cuando elijas una categor√≠a

El bot√≥n ‚ÄúFiltrar‚Äù env√≠a el GET sin problemas

Si seleccionas "Todas las categor√≠as" vuelve a mostrar todo

üß† Resultado:
Ver√°s una lista desplegable de categor√≠as

Al seleccionar una, solo ver√°s los apuntes de esa categor√≠a

Mantendr√° el mismo dise√±o y estilo bonito

